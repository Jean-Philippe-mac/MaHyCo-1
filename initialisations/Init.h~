#ifndef INITIALISATIONS_H
#define INITIALISATIONS_H

#include <Kokkos_Core.hpp>                // for KOKKOS_LAMBDA
#include <OpenMP/Kokkos_OpenMP_Exec.hpp>  // for OpenMP::impl_is_initialized

#include "../includes/CasTest.h"
#include "../includes/Constantes.h"
#include "../includes/CstMesh.h"
#include "../includes/GestionTemps.h"
#include "mesh/CartesianMesh2D.h"  // for CartesianMesh2D

using namespace nablalib;

namespace initlib {
  class Initialisations {
 public:
  CartesianMesh2D* mesh;
  castestlib::CasTest::Test* test;
  cstmeshlib::ConstantesMaillagesClass::ConstantesMaillages* cstmesh;
  variableslagremaplib::VariablesLagRemap* varlp;
  int nbNodes, nbCells, nbFacesnbCellsOfNode, nbNodesOfCell, nbNodesOfFace,
      nbCellsOfFace;

  
  // Variables
  Kokkos::View<RealArray1D<dim>*> m_node_coord_n0;
  Kokkos::View<RealArray1D<dim>*> m_cell_coord_n0;
  Kokkos::View<double*> m_euler_volume_n0;
  Kokkos::View<double*> m_cell_perimeter_n0;
  Kokkos::View<RealArray1D<dim>*> m_node_velocity_n0;
  Kokkos::View<double*> m_density_n0;
  Kokkos::View<RealArray1D<nbmatmax>*> m_density_env_n0;
  Kokkos::View<RealArray1D<dim>*> m_cell_velocity_n0;
  Kokkos::View<double*> m_internal_energy_n0;
  Kokkos::View<RealArray1D<nbmatmax>*> m_internal_energy_env_n0;
  Kokkos::View<RealArray1D<dim>**> m_node_force_n0;
  
public:
  Initialisations(
      CartesianMesh2D* aCartesianMesh2D,
      cstmeshlib::ConstantesMaillagesClass::ConstantesMaillages* acstmesh,
      gesttempslib::GestionTempsClass::GestTemps* agt,
      variableslagremaplib::VariablesLagRemap* avarlp,
      castestlib::CasTest::Test* aTest)
      : mesh(aCartesianMesh2D),
        test(aTest),
        gt(agt),
        varlp(avarlp),
        cstmesh(acstmesh),
        nbCells(mesh->getNbCells()),
        nbNodes(mesh->getNbNodes()),
        nbFaces(mesh->getNbFaces()),
        nbCellsOfNode(CartesianMesh2D::MaxNbCellsOfNode),
        nbNodesOfCell(CartesianMesh2D::MaxNbNodesOfCell),
        nbNodesOfFace(CartesianMesh2D::MaxNbNodesOfFace),
        m_node_coord_n0("node_coord", nbNodes),
        m_cell_coord_n0("cell_coord", nbCells),
        m_euler_volume_n0("euler_volume", nbCells),
        m_cell_perimeter_n0("cell_perimeter", nbCells),
        m_node_velocity_n0("node_velocity_n0", nbNodes),
        m_density_n0("density_n0", nbCells),
        m_density_env_n0("density_env_n0", nbCells), 
        m_cell_velocity_n0("cell_velocity_n0", nbCells),
        m_internal_energy_n0("internal_energy_n0", nbCells),
        m_internal_energy_env_n0("internal_energy_env_n0", nbCells)
      {
    // Copy node coordinates
    const auto& gNodes = mesh->getGeometry()->getNodes();
    Kokkos::parallel_for(
        nbNodes, KOKKOS_LAMBDA(const int& rNodes) {
          m_node_coord_n0(rNodes) = gNodes[rNodes];
        });
      }
  
  void initBoundaryConditions() noexcept;
  void initMeshGeometryForCells() noexcept;
  void initVpAndFpc() noexcept;
  void initCellInternalEnergy() noexcept;
  void initCellVelocity() noexcept;
  void initDensity() noexcept;
  void initMeshGeometryForFaces() noexcept;
